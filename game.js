class Minesweeper {
    constructor() {
        this.rows = 10;
        this.cols = 10;
        this.minesCount = 10;
        this.board = [];
        this.mines = [];
        this.revealedCount = 0;
        this.gameOver = false;
        this.gameWon = false;
        this.firstClick = true;
        this.flagsCount = 0;
        this.timer = 0;
        this.timerInterval = null;
        
        // –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
        this.score = 0;
        this.bestScore = 0;
        this.abilities = {
            scanner: {
                name: "–°–∫–∞–Ω–µ—Ä",
                icon: "üîç",
                cost: 50,
                uses: 1,
                maxUses: 1,
                description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 3 –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—ã"
            },
            shield: {
                name: "–©–∏—Ç",
                icon: "üõ°Ô∏è",
                cost: 100,
                uses: 1,
                maxUses: 1,
                description: "–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑—Ä—ã–≤–∞"
            },
            hint: {
                name: "–ü–æ–¥—Å–∫–∞–∑–∫–∞",
                icon: "üí°",
                cost: 30,
                uses: 3,
                maxUses: 3,
                description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É"
            }
        };
        
        this.boardElement = document.getElementById('board');
        this.resetButton = document.getElementById('resetButton');
        this.minesCounterElement = document.querySelector('.mines-counter');
        this.timerElement = document.querySelector('.timer');
        this.scoreElement = document.getElementById('scoreValue');
        this.bestScoreElement = document.getElementById('bestScoreValue');
        this.abilitiesPanel = document.getElementById('abilitiesPanel');
        
        this.resetButton.addEventListener('click', () => this.resetGame());
        this.initializeGame();
        this.updateScoreDisplay();
    }
    
    initializeGame() {
        this.board = [];
        this.mines = [];
        this.revealedCount = 0;
        this.gameOver = false;
        this.gameWon = false;
        this.firstClick = true;
        this.flagsCount = 0;
        this.timer = 0;
        
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
        
        this.updateMinesCounter();
        this.timerElement.textContent = '000';
        this.resetButton.textContent = 'üòä';
        
        // –°–±—Ä–æ—Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.abilities.scanner.uses = this.abilities.scanner.maxUses;
        this.abilities.shield.uses = this.abilities.shield.maxUses;
        this.abilities.hint.uses = this.abilities.hint.maxUses;
        
        this.boardElement.innerHTML = '';
        this.abilitiesPanel.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏
        for (let i = 0; i < this.rows; i++) {
            this.board[i] = [];
            for (let j = 0; j < this.cols; j++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.dataset.row = i;
                cell.dataset.col = j;
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
                cell.addEventListener('click', (e) => this.handleCellClick(e));
                cell.addEventListener('contextmenu', (e) => this.handleRightClick(e));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                let pressTimer;
                cell.addEventListener('touchstart', (e) => {
                    pressTimer = setTimeout(() => {
                        e.preventDefault();
                        this.handleRightClick(e);
                    }, 500); // 500ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                });
                
                cell.addEventListener('touchend', () => {
                    clearTimeout(pressTimer);
                });
                
                cell.addEventListener('touchmove', () => {
                    clearTimeout(pressTimer);
                });
                
                this.boardElement.appendChild(cell);
                this.board[i][j] = {
                    element: cell,
                    isMine: false,
                    isRevealed: false,
                    isFlagged: false,
                    neighborMines: 0
                };
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.createAbilitiesPanel();
    }
    
    createAbilitiesPanel() {
        for (const [key, ability] of Object.entries(this.abilities)) {
            const abilityElement = document.createElement('div');
            abilityElement.className = 'ability';
            abilityElement.id = `ability-${key}`;
            abilityElement.innerHTML = `
                <div class="ability-icon">${ability.icon}</div>
                <div class="ability-name">${ability.name}</div>
                <div class="ability-cost">${ability.cost} –æ—á–∫–æ–≤</div>
                <div class="ability-uses">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${ability.uses}/${ability.maxUses}</div>
            `;
            
            abilityElement.addEventListener('click', () => this.useAbility(key));
            this.abilitiesPanel.appendChild(abilityElement);
        }
        
        this.updateAbilitiesPanel();
    }
    
    updateAbilitiesPanel() {
        for (const [key, ability] of Object.entries(this.abilities)) {
            const abilityElement = document.getElementById(`ability-${key}`);
            const usesElement = abilityElement.querySelector('.ability-uses');
            usesElement.textContent = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${ability.uses}/${ability.maxUses}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            abilityElement.classList.remove('disabled');
            if (ability.uses <= 0 || this.score < ability.cost || this.gameOver || this.gameWon) {
                abilityElement.classList.add('disabled');
            }
        }
    }
    
    useAbility(abilityKey) {
        const ability = this.abilities[abilityKey];
        
        if (ability.uses <= 0 || this.score < ability.cost || this.gameOver || this.gameWon) {
            this.showMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π!");
            return;
        }
        
        switch(abilityKey) {
            case 'scanner':
                this.useScanner();
                break;
            case 'shield':
                // –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –Ω–∞ –º–∏–Ω—É
                this.showMessage("–©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–ª–µ–¥—É—é—â–∞—è –º–∏–Ω–∞ –Ω–µ –≤–∑–æ—Ä–≤—ë—Ç –≤–∞—Å.");
                break;
            case 'hint':
                this.useHint();
                break;
        }
        
        if (abilityKey !== 'shield') {
            ability.uses--;
            this.score -= ability.cost;
            this.updateScoreDisplay();
            this.updateAbilitiesPanel();
        }
    }
    
    useScanner() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–∏–Ω—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –±–ª–∏–∂–∞–π—à–∏–µ
        const mines = this.mines;
        if (mines.length === 0) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—ã
        const shownMines = mines.slice(0, Math.min(3, mines.length));
        
        shownMines.forEach(mine => {
            const cell = this.board[mine.row][mine.col].element;
            cell.classList.add('scanner-highlight');
        });
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            shownMines.forEach(mine => {
                const cell = this.board[mine.row][mine.col].element;
                cell.classList.remove('scanner-highlight');
            });
        }, 3000);
        
        this.showMessage("–°–∫–∞–Ω–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –º–∏–Ω—ã!");
    }
    
    useHint() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
        const safeCells = [];
        
        for (let i = 0; i < this.rows; i++) {
            for (let j = 0; j < this.cols; j++) {
                const cell = this.board[i][j];
                if (!cell.isRevealed && !cell.isMine && !cell.isFlagged) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
                    let hasRevealedNeighbor = false;
                    for (let di = -1; di <= 1; di++) {
                        for (let dj = -1; dj <= 1; dj++) {
                            const ni = i + di;
                            const nj = j + dj;
                            if (this.isValidCell(ni, nj) && this.board[ni][nj].isRevealed) {
                                hasRevealedNeighbor = true;
                                break;
                            }
                        }
                        if (hasRevealedNeighbor) break;
                    }
                    
                    if (hasRevealedNeighbor) {
                        safeCells.push({row: i, col: j});
                    }
                }
            }
        }
        
        if (safeCells.length > 0) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É
            const randomIndex = Math.floor(Math.random() * safeCells.length);
            const hintCell = safeCells[randomIndex];
            const cellElement = this.board[hintCell.row][hintCell.col].element;
            
            cellElement.classList.add('highlighted');
            
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                cellElement.classList.remove('highlighted');
            }, 2000);
            
            this.showMessage("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É!");
        } else {
            this.showMessage("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫!");
        }
    }
    
    startTimer() {
        this.timerInterval = setInterval(() => {
            this.timer++;
            this.timerElement.textContent = this.timer.toString().padStart(3, '0');
        }, 1000);
    }
    
    placeMines(excludeRow, excludeCol) {
        let minesPlaced = 0;
        
        while (minesPlaced < this.minesCount) {
            const row = Math.floor(Math.random() * this.rows);
            const col = Math.floor(Math.random() * this.cols);
            
            // –ù–µ —Å—Ç–∞–≤–∏–º –º–∏–Ω—É –Ω–∞ –ø–µ—Ä–≤—É—é –∫–ª–µ—Ç–∫—É –∏ –µ—Å–ª–∏ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –º–∏–Ω–∞
            if ((row === excludeRow && col === excludeCol) || this.board[row][col].isMine) {
                continue;
            }
            
            this.board[row][col].isMine = true;
            this.mines.push({row, col});
            minesPlaced++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ—Å–µ–¥–µ–π
            this.updateNeighbors(row, col);
        }
    }
    
    updateNeighbors(row, col) {
        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                const newRow = row + i;
                const newCol = col + j;
                
                if (this.isValidCell(newRow, newCol) && !this.board[newRow][newCol].isMine) {
                    this.board[newRow][newCol].neighborMines++;
                }
            }
        }
    }
    
    isValidCell(row, col) {
        return row >= 0 && row < this.rows && col >= 0 && col < this.cols;
    }
    
    handleCellClick(event) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        event.preventDefault();
        
        if (this.gameOver || this.gameWon) return;
        
        const row = parseInt(event.target.dataset.row);
        const col = parseInt(event.target.dataset.col);
        const cell = this.board[row][col];
        
        if (cell.isRevealed || cell.isFlagged) return;
        
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ —Ä–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
        if (this.firstClick) {
            this.firstClick = false;
            this.placeMines(row, col);
            this.startTimer();
        }
        
        if (cell.isMine) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —â–∏—Ç
            if (this.abilities.shield.uses > 0) {
                this.abilities.shield.uses--;
                cell.element.classList.add('shield-protected');
                this.showMessage("–©–∏—Ç —Å–ø–∞—Å –≤–∞—Å –æ—Ç –≤–∑—Ä—ã–≤–∞!");
                this.updateAbilitiesPanel();
                return;
            }
            
            this.revealMines();
            this.endGame(false);
            return;
        }
        
        this.revealCell(row, col);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (this.revealedCount === (this.rows * this.cols - this.minesCount)) {
            this.endGame(true);
        }
    }
    
    handleRightClick(event) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        event.preventDefault();
        event.stopPropagation();
        
        if (this.gameOver || this.gameWon) return;
        
        const row = parseInt(event.target.dataset.row);
        const col = parseInt(event.target.dataset.col);
        const cell = this.board[row][col];
        
        if (cell.isRevealed) return;
        
        if (cell.isFlagged) {
            cell.isFlagged = false;
            cell.element.classList.remove('flagged');
            this.flagsCount--;
        } else {
            cell.isFlagged = true;
            cell.element.classList.add('flagged');
            this.flagsCount++;
        }
        
        this.updateMinesCounter();
    }
    
    revealCell(row, col) {
        const cell = this.board[row][col];
        
        if (cell.isRevealed || cell.isFlagged) return;
        
        cell.isRevealed = true;
        cell.element.classList.add('revealed');
        this.revealedCount++;
        
        if (cell.neighborMines > 0) {
            cell.element.textContent = cell.neighborMines;
            cell.element.classList.add(`number-${cell.neighborMines}`);
        } else {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
            for (let i = -1; i <= 1; i++) {
                for (let j = -1; j <= 1; j++) {
                    const newRow = row + i;
                    const newCol = col + j;
                    
                    if (this.isValidCell(newRow, newCol)) {
                        this.revealCell(newRow, newCol);
                    }
                }
            }
        }
    }
    
    revealMines() {
        for (const mine of this.mines) {
            const cell = this.board[mine.row][mine.col];
            if (!cell.isFlagged) {
                cell.isRevealed = true;
                cell.element.classList.add('revealed', 'mine');
            }
        }
    }
    
    endGame(isWin) {
        this.gameOver = true;
        this.gameWon = isWin;
        
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        this.resetButton.textContent = isWin ? 'üòé' : 'üòµ';
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—É
        if (isWin) {
            const points = Math.max(10, 200 - this.timer);
            this.score += points;
            if (this.score > this.bestScore) {
                this.bestScore = this.score;
            }
            this.showMessage(`–ü–æ–±–µ–¥–∞! +${points} –æ—á–∫–æ–≤!`);
        }
        
        this.updateScoreDisplay();
        this.updateAbilitiesPanel();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
        setTimeout(() => {
            const gameOverDiv = document.createElement('div');
            gameOverDiv.className = 'game-over';
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'game-over-content';
            
            const title = document.createElement('h2');
            title.textContent = isWin ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!' : '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!';
            
            const timeText = document.createElement('p');
            timeText.textContent = `–í–∞—à–µ –≤—Ä–µ–º—è: ${this.timer} —Å–µ–∫—É–Ω–¥`;
            timeText.style.fontSize = '16px';
            timeText.style.margin = '10px 0';
            
            const scoreText = document.createElement('p');
            scoreText.innerHTML = `–û—á–∫–∏: <strong>${this.score}</strong><br>–†–µ–∫–æ—Ä–¥: <strong>${this.bestScore}</strong>`;
            scoreText.style.fontSize = '16px';
            scoreText.style.margin = '10px 0';
            
            const resetButton = document.createElement('button');
            resetButton.textContent = '–ù–æ–≤–∞—è –∏–≥—Ä–∞';
            resetButton.addEventListener('click', () => {
                document.body.removeChild(gameOverDiv);
                this.resetGame();
            });
            
            contentDiv.appendChild(title);
            contentDiv.appendChild(timeText);
            contentDiv.appendChild(scoreText);
            contentDiv.appendChild(resetButton);
            gameOverDiv.appendChild(contentDiv);
            document.body.appendChild(gameOverDiv);
        }, 500);
    }
    
    updateMinesCounter() {
        const remainingMines = this.minesCount - this.flagsCount;
        this.minesCounterElement.textContent = remainingMines.toString().padStart(3, '0');
    }
    
    updateScoreDisplay() {
        this.scoreElement.textContent = this.score;
        this.bestScoreElement.textContent = this.bestScore;
    }
    
    showMessage(text) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const existingMessages = document.querySelectorAll('.message');
        existingMessages.forEach(msg => msg.remove());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = document.createElement('div');
        message.className = 'message';
        message.textContent = text;
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            if (message.parentNode) {
                message.parentNode.removeChild(message);
            }
        }, 2000);
    }
    
    resetGame() {
        this.initializeGame();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
window.addEventListener('DOMContentLoaded', () => {
    new Minesweeper();
});
